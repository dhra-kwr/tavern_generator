package taverngenerator;

import java.util.ArrayList;
import java.util.Random;

public class TavernGeneratorUI extends javax.swing.JFrame {

    /**
     * Creates new form TavernGeneratorUI
     */
    public TavernGeneratorUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tavernNamePanel = new javax.swing.JPanel();
        tavernNameLabel = new javax.swing.JLabel();
        tavernNameField = new javax.swing.JTextField();
        lightingLabel = new javax.swing.JLabel();
        lightingField = new javax.swing.JTextField();
        smellsLabel = new javax.swing.JLabel();
        smellsField = new javax.swing.JTextField();
        barkeepPanel = new javax.swing.JPanel();
        barkeepLabel = new javax.swing.JLabel();
        barkeepField = new javax.swing.JTextField();
        numberOfPatronsLabel = new javax.swing.JLabel();
        numberOfPatronsField = new javax.swing.JTextField();
        interestingPatronLabel = new javax.swing.JLabel();
        interestingPatronField = new javax.swing.JTextField();
        foodEtcPanel = new javax.swing.JPanel();
        specialsLabel = new javax.swing.JLabel();
        specialsField = new javax.swing.JTextField();
        cuisineLabel = new javax.swing.JLabel();
        cuisineField = new javax.swing.JTextField();
        onTapLabel = new javax.swing.JLabel();
        brewLabel = new javax.swing.JLabel();
        onTapField = new javax.swing.JTextField();
        brewField = new javax.swing.JTextField();
        sideBusinessLabel = new javax.swing.JLabel();
        sideBusinessField = new javax.swing.JTextField();
        entertainmentLabel = new javax.swing.JLabel();
        entertainmentField = new javax.swing.JTextField();
        featuresPanel = new javax.swing.JPanel();
        firstFeatureLabel = new javax.swing.JLabel();
        firstFeatureScrollPane = new javax.swing.JScrollPane();
        firstFeatureTextArea = new javax.swing.JTextArea();
        secondFeatureLabel = new javax.swing.JLabel();
        secondFeatureScrollPane = new javax.swing.JScrollPane();
        secondFeatureTextArea = new javax.swing.JTextArea();
        eventsPanel = new javax.swing.JPanel();
        eventLabel = new javax.swing.JLabel();
        eventScrollPane = new javax.swing.JScrollPane();
        eventTextArea = new javax.swing.JTextArea();
        jobsLabel = new javax.swing.JLabel();
        jobsScrollPane = new javax.swing.JScrollPane();
        jobsTextArea = new javax.swing.JTextArea();
        generatePanel = new javax.swing.JPanel();
        generateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tavern Generator v0.1");

        tavernNamePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tavern Name & Ambiance", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tavernNameLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tavernNameLabel.setText("Tavern Name:");

        tavernNameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lightingLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lightingLabel.setText("Lighting:");

        lightingField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        smellsLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        smellsLabel.setText("Smells Like:");

        smellsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout tavernNamePanelLayout = new javax.swing.GroupLayout(tavernNamePanel);
        tavernNamePanel.setLayout(tavernNamePanelLayout);
        tavernNamePanelLayout.setHorizontalGroup(
            tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tavernNamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tavernNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(smellsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lightingLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tavernNameField)
                    .addComponent(lightingField, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                    .addComponent(smellsField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tavernNamePanelLayout.setVerticalGroup(
            tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tavernNamePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tavernNameLabel)
                    .addComponent(tavernNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lightingLabel)
                    .addComponent(lightingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smellsLabel)
                    .addComponent(smellsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        barkeepPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Barkeep & Patrons", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        barkeepLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        barkeepLabel.setText("Barkeep:");

        barkeepField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        numberOfPatronsLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        numberOfPatronsLabel.setText("Number of Patrons:");

        numberOfPatronsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        interestingPatronLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        interestingPatronLabel.setText("Interesting Patron:");

        interestingPatronField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout barkeepPanelLayout = new javax.swing.GroupLayout(barkeepPanel);
        barkeepPanel.setLayout(barkeepPanelLayout);
        barkeepPanelLayout.setHorizontalGroup(
            barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barkeepPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barkeepLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(interestingPatronLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(numberOfPatronsLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numberOfPatronsField, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addComponent(interestingPatronField)
                    .addComponent(barkeepField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        barkeepPanelLayout.setVerticalGroup(
            barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barkeepPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barkeepLabel)
                    .addComponent(barkeepField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfPatronsLabel)
                    .addComponent(numberOfPatronsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interestingPatronLabel)
                    .addComponent(interestingPatronField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        foodEtcPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Food, Drink, Services & Entertainment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        specialsLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        specialsLabel.setText("Special of the Day:");

        specialsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        cuisineLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cuisineLabel.setText("Strange Cuisine:");

        cuisineField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        onTapLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        onTapLabel.setText("On the Tap:");

        brewLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        brewLabel.setText("Strange Brew:");

        onTapField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        brewField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        sideBusinessLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sideBusinessLabel.setText("Side Business:");

        sideBusinessField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sideBusinessField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sideBusinessFieldActionPerformed(evt);
            }
        });

        entertainmentLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        entertainmentLabel.setText("Entertainment:");

        entertainmentField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout foodEtcPanelLayout = new javax.swing.GroupLayout(foodEtcPanel);
        foodEtcPanel.setLayout(foodEtcPanelLayout);
        foodEtcPanelLayout.setHorizontalGroup(
            foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodEtcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(specialsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cuisineLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(onTapLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(brewLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sideBusinessLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(entertainmentLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(specialsField)
                    .addComponent(cuisineField)
                    .addComponent(onTapField)
                    .addComponent(brewField)
                    .addComponent(sideBusinessField)
                    .addComponent(entertainmentField))
                .addContainerGap())
        );
        foodEtcPanelLayout.setVerticalGroup(
            foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodEtcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(specialsLabel)
                    .addComponent(specialsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cuisineLabel)
                    .addComponent(cuisineField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(onTapLabel)
                    .addComponent(onTapField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brewLabel)
                    .addComponent(brewField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sideBusinessLabel)
                    .addComponent(sideBusinessField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(entertainmentLabel)
                    .addComponent(entertainmentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        featuresPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Interesting Features", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        firstFeatureLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        firstFeatureLabel.setText("Interesting Feature #1:");

        firstFeatureTextArea.setColumns(20);
        firstFeatureTextArea.setRows(5);
        firstFeatureScrollPane.setViewportView(firstFeatureTextArea);

        secondFeatureLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        secondFeatureLabel.setText("Interesting Feature #2:");

        secondFeatureTextArea.setColumns(20);
        secondFeatureTextArea.setRows(5);
        secondFeatureScrollPane.setViewportView(secondFeatureTextArea);

        javax.swing.GroupLayout featuresPanelLayout = new javax.swing.GroupLayout(featuresPanel);
        featuresPanel.setLayout(featuresPanelLayout);
        featuresPanelLayout.setHorizontalGroup(
            featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featuresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(firstFeatureLabel)
                    .addComponent(firstFeatureScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(secondFeatureLabel)
                    .addComponent(secondFeatureScrollPane))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        featuresPanelLayout.setVerticalGroup(
            featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featuresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(firstFeatureLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(firstFeatureScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(secondFeatureLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(secondFeatureScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        eventsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Events & Jobs", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        eventLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        eventLabel.setText("Random Event:");

        eventTextArea.setColumns(20);
        eventTextArea.setRows(5);
        eventScrollPane.setViewportView(eventTextArea);

        jobsLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jobsLabel.setText("Jobs:");

        jobsTextArea.setColumns(20);
        jobsTextArea.setRows(5);
        jobsScrollPane.setViewportView(jobsTextArea);

        javax.swing.GroupLayout eventsPanelLayout = new javax.swing.GroupLayout(eventsPanel);
        eventsPanel.setLayout(eventsPanelLayout);
        eventsPanelLayout.setHorizontalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addGroup(eventsPanelLayout.createSequentialGroup()
                        .addGroup(eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eventLabel)
                            .addComponent(jobsLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jobsScrollPane))
                .addContainerGap())
        );
        eventsPanelLayout.setVerticalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eventLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jobsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jobsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        generateButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generateButton.setText("GENERATE!");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout generatePanelLayout = new javax.swing.GroupLayout(generatePanel);
        generatePanel.setLayout(generatePanelLayout);
        generatePanelLayout.setHorizontalGroup(
            generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generatePanelLayout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        generatePanelLayout.setVerticalGroup(
            generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(featuresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(foodEtcPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tavernNamePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barkeepPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(generatePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(barkeepPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tavernNamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(eventsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(featuresPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(foodEtcPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(generatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sideBusinessFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sideBusinessFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sideBusinessFieldActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        // TODO add your handling code here:
        tavernCobbler();
    }//GEN-LAST:event_generateButtonActionPerformed

    public void tavernCobbler() {
        
        nameCobbler();
        lightingCobbler();
        smellsCobbler();
        barkeepCobbler();
        patronCobbler();
        interestingFeaturesCobbler();
    }
    
    public void interestingFeaturesCobbler() {
        
        ArrayList<String> features = new ArrayList<>();
        Random rand = new Random();
        
        features.add("A ragged hole in the ceiling extends through the \n"
                + "building showing blue sky. Gentle music floats down \n"
                + "the hole and occasionally a large shadow obscures it. \n"
                + "The building appears to be intact from the outside.");
        
        features.add("The common room is lined with shelves holding thick \n"
                + "tomes written in a long-dead language. Sometimes a \n"
                + "tome floats accross the room trailing dust.");
        
        features.add("In the center of the room two brass golems dance \n"
                + "a slow waltz. It is said that they will keep dancing \n"
                + "until the end of the wolrd.");
        
        features.add("A decrepit stone altar with faded markings stands at the \n"
                + "end of the bar. Whoever prays there drinks for free the \n"
                + "rest of the day.");
        
        features.add("Animated mouths are carved into the walls whisper \n"
                + "barely heard soothing words.");
        
        features.add("The fireplace is built into a large marble statue \n"
                + "depicting a hero of old. The head of the statue has \n"
                + "been cut off long ago.");
        
        features.add("One side of the common room has been converted into \n"
                + "a pool for the patrons to lounge in. The water is 1) \n"
                + "clear 2) murky 3) noxious.");
        
        features.add("Spectral patrons flit among the living folk wearing \n"
                + "strange clothes. They avoid contact with the mundane \n"
                + "patrons and turn away if someone tries to engage them \n"
                + "in a conversation.");
        
        features.add("The air is heavy in the establishment and gravity's \n"
                + "pull is stronger here. Walking is difficult and some \n"
                + "patrons crawl on the floor.");
        
        features.add("A long, narrow table stands in the middle of the \n"
                + "common room. The table is wreathed in wilted flowers, \n"
                + "upon which lies the embalmed corpse of the founder of \n"
                + "the establishment.");
        
        features.add("The furniture is crafted from the spine of some \n"
                + "gigantic creature. The chairs are not particularly \n"
                + "comfortable to sit in and the surfaces of the tables \n"
                + "are quite uneven.");
        
        features.add("A pillar of jagged crystal pushes through the floor. \n"
                + "Something dark shimmers in the angles of the cuts and \n"
                + "anyone scrutinizing the pillar sees into the worst \n"
                + "possible future they can imagine.");
        
        features.add("Thick, sticky webbing hangs down from the rafters. \n"
                + "On rare mornings some patrons are found dead in their \n"
                + "rooms, wrapped in cocoons with their insides liquified.");
        
        features.add("In addition to other lighting, fluorescent mushrooms \n"
                + "grow from the floor and walls. They glow with a gentle \n"
                + "bluish light, which intensifies as something living \n"
                + "approaches them.");
        
        features.add("Every sixth hour, beginning at midnight, the walls \n"
                + "bleed and sounds of stiffled pleasure echo through the \n"
                + "premises.");
        
        features.add("The serving staff is composed of halfling-sized, \n"
                + "six-limbed monkeys wearing garish pantaloons. They \n"
                + "serve the customers with speed and dexterity.");
        
        features.add("A fountain of ale churns besides the bar and all are \n"
                + "welcome to drink one stein for free. The ale is quite \n"
                + "potent.");
        
        features.add("The inn / tavern is carried around on the back of a \n"
                + "gargantuan, crab-like automaton. The locals curse it as \n"
                + "it crashes into their property.");
        
        features.add("The tables are enchanted to keep one's food warm and \n"
                + "drink cold. Sometimes the enchantment malfunctions. A \n"
                + "golden haze swirls above the tabletops.");
        
        features.add("The building and furniture of the establishment seem \n"
                + "to be crafted from a single block of stone. Everything is \n"
                + "scaled a little too large for the average human.");
        
        features.add("The serving staff is made of floating, animated \n"
                + "tableware. Occasionally they sing a song of vampires, \n"
                + "curses and dark enchantments.");
        
        features.add("The furniture is decorated with exquisite carvings \n"
                + "of nude folk of every conceivable species and sexes \n."
                + "going at each other in an orgy of pleasure and violence.");
        
        /*features.add("");
        features.add("");
        features.add("");
        features.add("");
        */
        //features.add("");
        
        String firstFeature = features.get(rand.nextInt(features.size()));
        String secondFeature = features.get(rand.nextInt(features.size()));
        
        if (firstFeature.equals(secondFeature)) {
            firstFeatureTextArea.setText(firstFeature);
        } else {
            firstFeatureTextArea.setText(firstFeature);
            secondFeatureTextArea.setText(secondFeature);
        }
    }
    
    public void patronCobbler() {
        
        ArrayList<String> patronTextList = new ArrayList<>();
        ArrayList<String> interestingPatronList = new ArrayList<>();
        Random rand = new Random();
        
       patronTextList.add("1");
        patronTextList.add("2-10");
        patronTextList.add("2-10");
        patronTextList.add("2-10");
        patronTextList.add("11-20");
        patronTextList.add("11-20");
        patronTextList.add("11-20");
        patronTextList.add("21-30");
        patronTextList.add("21-30");
        patronTextList.add("31-40");
        patronTextList.add("31-40");
        patronTextList.add("41+");
        
        numberOfPatronsField.setText(patronTextList.get(rand.
                nextInt(patronTextList.size())));

        interestingPatronList.add("Bandit(?) on the run");
        interestingPatronList.add("Exiled prince / princess");
        interestingPatronList.add("Undead minstrel");
        interestingPatronList.add("Creature from another plane");
        interestingPatronList.add("War hero");
        interestingPatronList.add("Famous bard");
        interestingPatronList.add("Wandering guru");
        interestingPatronList.add("Infamous mime");
        interestingPatronList.add("Doppelganger of a local noble");
        interestingPatronList.add("Thrill-seeking student(s)");
        interestingPatronList.add("Slumming noble lad / lass");
        interestingPatronList.add("Visitor from savage lands");
        interestingPatronList.add("Poet of some renown");
        interestingPatronList.add("Actor who has fallen from favor");
        interestingPatronList.add("Disgraced noble");
        interestingPatronList.add("Deserter from a local fighting force");
        interestingPatronList.add("Deserter from a distant land");
        interestingPatronList.add("Merchant flashing money");
        interestingPatronList.add("Spirit of a former patron");
        interestingPatronList.add("Killer prowling for their next victim");
        interestingPatronList.add("Priest / priestess of a local order");
        interestingPatronList.add("Secret cultist");
        interestingPatronList.add("Local crime boss' number one goon");
        interestingPatronList.add("Local crime boss");
        interestingPatronList.add("Sorcerer resting after a day's travel");
        interestingPatronList.add("Knight on a quest");
        interestingPatronList.add("Self-important tax collector");
        interestingPatronList.add("Well-known slaver");
        interestingPatronList.add("Disliked member of the upper class");
        interestingPatronList.add("Well-loved local entrepreneur");
        interestingPatronList.add("Sentient fungus-person having a brew");
        
        interestingPatronField.setText(interestingPatronList.get(rand.
                nextInt(interestingPatronList.size())));
        
    }
    
    public void barkeepCobbler() {
        
        ArrayList<String> barkeepAttribute = new ArrayList<>();
        
        Random rand = new Random();
        
        barkeepAttribute.add("old");
        barkeepAttribute.add("cranky");
        barkeepAttribute.add("young");
        barkeepAttribute.add("pretty");
        barkeepAttribute.add("pouty");
        barkeepAttribute.add("glum");
        barkeepAttribute.add("middle-aged");
        barkeepAttribute.add("pockmarked");
        barkeepAttribute.add("sarcastic");
        barkeepAttribute.add("sardonic");
        barkeepAttribute.add("dull-witted");
        barkeepAttribute.add("strong");
        barkeepAttribute.add("weak");
        barkeepAttribute.add("pale");
        barkeepAttribute.add("ruddy");
        barkeepAttribute.add("bald");
        barkeepAttribute.add("singing");
        barkeepAttribute.add("happy");
        barkeepAttribute.add("blind");
        barkeepAttribute.add("mute");
        barkeepAttribute.add("clumsy");
        barkeepAttribute.add("deft");
        barkeepAttribute.add("deaf");
        barkeepAttribute.add("well-muscled");
        barkeepAttribute.add("angry");
        barkeepAttribute.add("scowling");
        barkeepAttribute.add("lazy");
        barkeepAttribute.add("humming");
        barkeepAttribute.add("whistling");
        barkeepAttribute.add("thin");
        barkeepAttribute.add("nervous");
        barkeepAttribute.add("tall");
        barkeepAttribute.add("short");
        barkeepAttribute.add("dizzy");
        barkeepAttribute.add("enthusiastic");
        barkeepAttribute.add("portly");
        barkeepAttribute.add("mad");
        barkeepAttribute.add("toothless");
        barkeepAttribute.add("well-dressed");
        barkeepAttribute.add("articulate");
        barkeepAttribute.add("well-mannered");
        barkeepAttribute.add("shuffling");
        //barkeepAttribute.add("");
        
        String firstAttribute = barkeepAttribute.get(rand.nextInt(
                                barkeepAttribute.size()));
        String secondAttribute = barkeepAttribute.get(rand.nextInt(
                                barkeepAttribute.size()));
        String description;
        
        if (firstAttribute.equals(secondAttribute)) {
            description = firstAttribute.substring(0,1).toUpperCase() + 
                            firstAttribute.substring(1).toLowerCase();
            barkeepField.setText(description);
        } else {
            description = firstAttribute.substring(0,1).toUpperCase() + 
                            firstAttribute.substring(1).toLowerCase() + 
                            " and " + secondAttribute;
            barkeepField.setText(description);
        }
    }
    
    public void smellsCobbler() {
        
        ArrayList<String> smellsList = new ArrayList<>();
        
        smellsList.add("blood");
        smellsList.add("sawdust");
        smellsList.add("mold");
        smellsList.add("cider");
        smellsList.add("ale");
        smellsList.add("wine");
        smellsList.add("mulled Wine");
        smellsList.add("cinnamon");
        smellsList.add("vomit");
        smellsList.add("urine");
        smellsList.add("latrines");
        smellsList.add("wet dog");
        smellsList.add("wet socks");
        smellsList.add("straw");
        smellsList.add("rotten fruit");
        smellsList.add("pipe smoke");
        smellsList.add("sweet incense");
        smellsList.add("curry");
        smellsList.add("beer");
        smellsList.add("manure");
        smellsList.add("mud");
        smellsList.add("dust");
        smellsList.add("wet wool");
        smellsList.add("sweat");
        smellsList.add("charred meat");
        smellsList.add("bacon");
        smellsList.add("fried potatoes");
        smellsList.add("resin");
        smellsList.add("boiled cabbage");
        smellsList.add("smoked fish");
        smellsList.add("fried vegetables");
        smellsList.add("boiled rice");
        smellsList.add("mutton");
        smellsList.add("mint");
        smellsList.add("soap water");
        
        Random rand = new Random();
        
        String smellOne = smellsList.get(rand.nextInt(smellsList.size()));
        String smellTwo = smellsList.get(rand.nextInt(smellsList.size()));
        String smellCombined;
        
        if (!smellTwo.equals(smellOne)) {
            smellCombined = (smellOne + " and " + smellTwo);
            smellsField.setText(smellCombined.substring(0,1).toUpperCase() + 
                    smellCombined.substring(1).toLowerCase());
        } else {
            smellsField.setText(smellOne);
        }
    }
    
    public void lightingCobbler() {
        
        Random rand = new Random();
        int number = rand.nextInt(7);
        
        switch(number) {
            case 0: lightingField.setText("Candles only");
                    break;
            case 1: lightingField.setText("Several torches");
                    break;
            case 2: lightingField.setText("Chandelier");
                    break;
            case 3: lightingField.setText("Glowing stones set in the walls");
                    break;
            case 4: lightingField.setText("Fireplace and torches");
                    break;
            case 5: lightingField.setText("Fireplace and candles");
                    break;
            case 6: lightingField.setText("Weird alchemical lights");
                    break;
        }
    }
    
    public void nameCobbler() {
        
        ArrayList<String> tavernNameDescriptor = new ArrayList<>();
        ArrayList<String> tavernNameNoun = new ArrayList<>();
        
        Random rand = new Random();
        
        tavernNameDescriptor.add("Lazy");
        tavernNameDescriptor.add("Dancing");
        tavernNameDescriptor.add("Naked");
        tavernNameDescriptor.add("Stern");
        tavernNameDescriptor.add("Royal");
        tavernNameDescriptor.add("Swarming");
        tavernNameDescriptor.add("Emerald");
        tavernNameDescriptor.add("Tricksy");
        tavernNameDescriptor.add("Lusty");
        tavernNameDescriptor.add("Armored");
        tavernNameDescriptor.add("Flexing");
        tavernNameDescriptor.add("Caustic");
        tavernNameDescriptor.add("Prancing");
        tavernNameDescriptor.add("Toothy");
        tavernNameDescriptor.add("Bashful");
        tavernNameDescriptor.add("Smirking");
        tavernNameDescriptor.add("Vain");
        tavernNameDescriptor.add("Poetic");
        tavernNameDescriptor.add("Glum");
        tavernNameDescriptor.add("Gloomy");
        tavernNameDescriptor.add("Plump");
        tavernNameDescriptor.add("Skeletal");
        tavernNameDescriptor.add("Dying");
        tavernNameDescriptor.add("Lively");
        tavernNameDescriptor.add("Arcane");
        tavernNameDescriptor.add("Mystic");
        tavernNameDescriptor.add("Blistering");
        tavernNameDescriptor.add("Gambling");
        tavernNameDescriptor.add("Yellow");
        tavernNameDescriptor.add("Black");
        tavernNameDescriptor.add("Red");
        tavernNameDescriptor.add("Bronze");
        tavernNameDescriptor.add("Laughing");
        tavernNameDescriptor.add("Sleeping");
        tavernNameDescriptor.add("Meaty");
        tavernNameDescriptor.add("Limber");
        tavernNameDescriptor.add("Wounded");
        tavernNameDescriptor.add("Hanged");
        tavernNameDescriptor.add("Tickling");
        tavernNameDescriptor.add("Woolly");
        tavernNameDescriptor.add("Safe");
        tavernNameDescriptor.add("Cheap");
        tavernNameDescriptor.add("Poisonous");
        tavernNameDescriptor.add("Roaring");
        tavernNameDescriptor.add("Bleeding");
        tavernNameDescriptor.add("Shining");
        tavernNameDescriptor.add("Colorful");
        tavernNameDescriptor.add("Lurking");
        tavernNameDescriptor.add("Hobbling");
        tavernNameDescriptor.add("Drunk");
        tavernNameDescriptor.add("Stout");
        tavernNameDescriptor.add("Thick");
        tavernNameDescriptor.add("Little");
        tavernNameDescriptor.add("Big");
        tavernNameDescriptor.add("Gnashing");
        tavernNameDescriptor.add("Spectral");
        tavernNameDescriptor.add("Extatic");
        tavernNameDescriptor.add("Blissful");
        tavernNameDescriptor.add("Leering");
        tavernNameDescriptor.add("Chained");
        tavernNameDescriptor.add("Wrinkled");
        tavernNameDescriptor.add("Narrow");
        tavernNameDescriptor.add("Rigid");
        tavernNameDescriptor.add("Erect");
        tavernNameDescriptor.add("Erratic");
        tavernNameDescriptor.add("Bloody");
        tavernNameDescriptor.add("Gleaming");
        tavernNameDescriptor.add("Sharp");
        tavernNameDescriptor.add("Homeless");
        tavernNameDescriptor.add("Undead");
        tavernNameDescriptor.add("Flaming");
        //tavernNameDescriptor.add("");
        
        tavernNameNoun.add("Queen");
        tavernNameNoun.add("Priest");
        tavernNameNoun.add("Vampire");
        tavernNameNoun.add("Mug");
        tavernNameNoun.add("House");
        tavernNameNoun.add("Salmon");
        tavernNameNoun.add("Sun");
        tavernNameNoun.add("Simpleton");
        tavernNameNoun.add("Badger");
        tavernNameNoun.add("Staff");
        tavernNameNoun.add("Horse");
        tavernNameNoun.add("Skeleton");
        tavernNameNoun.add("Titan");
        tavernNameNoun.add("Giant");
        tavernNameNoun.add("Shark");
        tavernNameNoun.add("Courtesan");
        tavernNameNoun.add("Harlot");
        tavernNameNoun.add("Jester");
        tavernNameNoun.add("Corpse");
        tavernNameNoun.add("Knight");
        tavernNameNoun.add("Elf");
        tavernNameNoun.add("Hound");
        tavernNameNoun.add("Cat");
        tavernNameNoun.add("King");
        tavernNameNoun.add("Baron");
        tavernNameNoun.add("Knave");
        tavernNameNoun.add("Bandit");
        tavernNameNoun.add("Ruffian");
        tavernNameNoun.add("Moose");
        tavernNameNoun.add("Laurel");
        tavernNameNoun.add("Acorn");
        tavernNameNoun.add("Boat");
        tavernNameNoun.add("Wagon");
        tavernNameNoun.add("Rock");
        tavernNameNoun.add("Crow");
        tavernNameNoun.add("Dragon");
        tavernNameNoun.add("Fang");
        tavernNameNoun.add("Claw");
        tavernNameNoun.add("Cauldron");
        tavernNameNoun.add("Soup");
        tavernNameNoun.add("Pie");
        tavernNameNoun.add("Boneyard");
        tavernNameNoun.add("Shepherd");
        tavernNameNoun.add("Officer");
        tavernNameNoun.add("Sheep");
        tavernNameNoun.add("Eagle");
        tavernNameNoun.add("Golem");
        tavernNameNoun.add("Orc");
        tavernNameNoun.add("Wanderer");
        tavernNameNoun.add("Barrel");
        tavernNameNoun.add("Minstrel");
        tavernNameNoun.add("Sword");
        tavernNameNoun.add("Arrow");
        tavernNameNoun.add("Bow");
        tavernNameNoun.add("Spear");
        tavernNameNoun.add("Shield");
        tavernNameNoun.add("Crown");
        tavernNameNoun.add("Ring");
        tavernNameNoun.add("Cloak");
        tavernNameNoun.add("Warlock");
        tavernNameNoun.add("Hag");
        tavernNameNoun.add("Fiend");
        tavernNameNoun.add("Ritualist");
        tavernNameNoun.add("Witch");
        //tavernNameNoun.add("");
        
        int alternative = rand.nextInt(2);
        String firstPart;
        String secondPart;
        String wholeName;
        
        switch (alternative) {
            case 0: firstPart = tavernNameDescriptor.get(rand.nextInt
                                (tavernNameDescriptor.size()));
                    secondPart = tavernNameNoun.get(rand.nextInt
                                (tavernNameNoun.size()));
                    wholeName = "The " + firstPart + " " + secondPart;
                    tavernNameField.setText(wholeName);
                    break;
            case 1: firstPart = tavernNameNoun.get(rand.nextInt
                                (tavernNameNoun.size()));
                    secondPart = tavernNameNoun.get(rand.nextInt
                                (tavernNameNoun.size()));
                    if (firstPart.equals(secondPart)) {
                        wholeName = "The " + firstPart;
                        tavernNameField.setText(wholeName);
                    } else {
                        wholeName = "The " + firstPart + " and the " +
                                    secondPart;
                        tavernNameField.setText(wholeName);
                    }
                    break;
            /**
            case 2: tavernNameField.setText("The " + tavernNameNoun.
                    get(rand.nextInt(tavernNameNoun.size())) + "'s " + 
                    tavernNameNoun.get(rand.nextInt(tavernNameNoun.size())));
                    break;
            **/
        }
        
    }
    
    public void barkeep() {
        barkeepField.setText("Stiff and corpselike");
    }
    
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TavernGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TavernGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TavernGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TavernGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TavernGeneratorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField barkeepField;
    private javax.swing.JLabel barkeepLabel;
    private javax.swing.JPanel barkeepPanel;
    private javax.swing.JTextField brewField;
    private javax.swing.JLabel brewLabel;
    private javax.swing.JTextField cuisineField;
    private javax.swing.JLabel cuisineLabel;
    private javax.swing.JTextField entertainmentField;
    private javax.swing.JLabel entertainmentLabel;
    private javax.swing.JLabel eventLabel;
    private javax.swing.JScrollPane eventScrollPane;
    private javax.swing.JTextArea eventTextArea;
    private javax.swing.JPanel eventsPanel;
    private javax.swing.JPanel featuresPanel;
    private javax.swing.JLabel firstFeatureLabel;
    private javax.swing.JScrollPane firstFeatureScrollPane;
    private javax.swing.JTextArea firstFeatureTextArea;
    private javax.swing.JPanel foodEtcPanel;
    private javax.swing.JButton generateButton;
    private javax.swing.JPanel generatePanel;
    private javax.swing.JTextField interestingPatronField;
    private javax.swing.JLabel interestingPatronLabel;
    private javax.swing.JLabel jobsLabel;
    private javax.swing.JScrollPane jobsScrollPane;
    private javax.swing.JTextArea jobsTextArea;
    private javax.swing.JTextField lightingField;
    private javax.swing.JLabel lightingLabel;
    private javax.swing.JTextField numberOfPatronsField;
    private javax.swing.JLabel numberOfPatronsLabel;
    private javax.swing.JTextField onTapField;
    private javax.swing.JLabel onTapLabel;
    private javax.swing.JLabel secondFeatureLabel;
    private javax.swing.JScrollPane secondFeatureScrollPane;
    private javax.swing.JTextArea secondFeatureTextArea;
    private javax.swing.JTextField sideBusinessField;
    private javax.swing.JLabel sideBusinessLabel;
    private javax.swing.JTextField smellsField;
    private javax.swing.JLabel smellsLabel;
    private javax.swing.JTextField specialsField;
    private javax.swing.JLabel specialsLabel;
    private javax.swing.JTextField tavernNameField;
    private javax.swing.JLabel tavernNameLabel;
    private javax.swing.JPanel tavernNamePanel;
    // End of variables declaration//GEN-END:variables
}
