package taverngenerator;

import java.util.ArrayList;
import java.util.Random;

public class TavernGeneratorUI extends javax.swing.JFrame {
    
    /**
     * Creates new form TavernGeneratorUI
     */
    public TavernGeneratorUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tavernNamePanel = new javax.swing.JPanel();
        tavernNameLabel = new javax.swing.JLabel();
        tavernNameField = new javax.swing.JTextField();
        lightingLabel = new javax.swing.JLabel();
        lightingField = new javax.swing.JTextField();
        smellsLabel = new javax.swing.JLabel();
        smellsField = new javax.swing.JTextField();
        barkeepPanel = new javax.swing.JPanel();
        barkeepLabel = new javax.swing.JLabel();
        barkeepField = new javax.swing.JTextField();
        numberOfPatronsLabel = new javax.swing.JLabel();
        numberOfPatronsField = new javax.swing.JTextField();
        interestingPatronLabel = new javax.swing.JLabel();
        interestingPatronField = new javax.swing.JTextField();
        foodEtcPanel = new javax.swing.JPanel();
        specialsLabel = new javax.swing.JLabel();
        specialsField = new javax.swing.JTextField();
        cuisineLabel = new javax.swing.JLabel();
        cuisineField = new javax.swing.JTextField();
        brewLabel = new javax.swing.JLabel();
        brewField = new javax.swing.JTextField();
        sideBusinessLabel = new javax.swing.JLabel();
        sideBusinessField = new javax.swing.JTextField();
        entertainmentLabel = new javax.swing.JLabel();
        entertainmentField = new javax.swing.JTextField();
        featuresPanel = new javax.swing.JPanel();
        firstFeatureLabel = new javax.swing.JLabel();
        firstFeatureScrollPane = new javax.swing.JScrollPane();
        firstFeatureTextArea = new javax.swing.JTextArea();
        secondFeatureLabel = new javax.swing.JLabel();
        secondFeatureScrollPane = new javax.swing.JScrollPane();
        secondFeatureTextArea = new javax.swing.JTextArea();
        eventsPanel = new javax.swing.JPanel();
        eventLabel = new javax.swing.JLabel();
        eventScrollPane = new javax.swing.JScrollPane();
        eventTextArea = new javax.swing.JTextArea();
        jobsLabel = new javax.swing.JLabel();
        jobsScrollPane = new javax.swing.JScrollPane();
        jobsTextArea = new javax.swing.JTextArea();
        generatePanel = new javax.swing.JPanel();
        generateButton = new javax.swing.JButton();
        generateButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tavern Generator v0.1");

        tavernNamePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tavern Name & Ambiance", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tavernNameLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tavernNameLabel.setText("Tavern Name:");

        tavernNameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lightingLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lightingLabel.setText("Lighting:");

        lightingField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        smellsLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        smellsLabel.setText("Smells Like:");

        smellsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout tavernNamePanelLayout = new javax.swing.GroupLayout(tavernNamePanel);
        tavernNamePanel.setLayout(tavernNamePanelLayout);
        tavernNamePanelLayout.setHorizontalGroup(
            tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tavernNamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tavernNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(smellsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lightingLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tavernNameField)
                    .addComponent(lightingField, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                    .addComponent(smellsField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tavernNamePanelLayout.setVerticalGroup(
            tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tavernNamePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tavernNameLabel)
                    .addComponent(tavernNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lightingLabel)
                    .addComponent(lightingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tavernNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smellsLabel)
                    .addComponent(smellsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        barkeepPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Barkeep & Patrons", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        barkeepLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        barkeepLabel.setText("Barkeep:");

        barkeepField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        numberOfPatronsLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        numberOfPatronsLabel.setText("Number of Patrons:");

        numberOfPatronsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        interestingPatronLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        interestingPatronLabel.setText("Interesting Patron:");

        interestingPatronField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout barkeepPanelLayout = new javax.swing.GroupLayout(barkeepPanel);
        barkeepPanel.setLayout(barkeepPanelLayout);
        barkeepPanelLayout.setHorizontalGroup(
            barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barkeepPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barkeepLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(interestingPatronLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(numberOfPatronsLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numberOfPatronsField, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addComponent(interestingPatronField)
                    .addComponent(barkeepField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        barkeepPanelLayout.setVerticalGroup(
            barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barkeepPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barkeepLabel)
                    .addComponent(barkeepField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfPatronsLabel)
                    .addComponent(numberOfPatronsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(barkeepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interestingPatronLabel)
                    .addComponent(interestingPatronField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        foodEtcPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Food, Drink, Services & Entertainment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        specialsLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        specialsLabel.setText("Special of the Day:");

        specialsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        cuisineLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cuisineLabel.setText("Strange Cuisine:");

        cuisineField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        brewLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        brewLabel.setText("Strange Brew:");

        brewField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        sideBusinessLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sideBusinessLabel.setText("Side Business:");

        sideBusinessField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sideBusinessField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sideBusinessFieldActionPerformed(evt);
            }
        });

        entertainmentLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        entertainmentLabel.setText("Entertainment:");

        entertainmentField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout foodEtcPanelLayout = new javax.swing.GroupLayout(foodEtcPanel);
        foodEtcPanel.setLayout(foodEtcPanelLayout);
        foodEtcPanelLayout.setHorizontalGroup(
            foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodEtcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(specialsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cuisineLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(brewLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sideBusinessLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(entertainmentLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(specialsField, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(cuisineField)
                    .addComponent(brewField)
                    .addComponent(sideBusinessField)
                    .addComponent(entertainmentField))
                .addContainerGap())
        );
        foodEtcPanelLayout.setVerticalGroup(
            foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodEtcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(specialsLabel)
                    .addComponent(specialsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cuisineLabel)
                    .addComponent(cuisineField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brewLabel)
                    .addComponent(brewField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sideBusinessLabel)
                    .addComponent(sideBusinessField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodEtcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(entertainmentLabel)
                    .addComponent(entertainmentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        featuresPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Interesting Features", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        firstFeatureLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        firstFeatureLabel.setText("Interesting Feature #1:");

        firstFeatureTextArea.setColumns(20);
        firstFeatureTextArea.setRows(5);
        firstFeatureScrollPane.setViewportView(firstFeatureTextArea);

        secondFeatureLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        secondFeatureLabel.setText("Interesting Feature #2:");

        secondFeatureTextArea.setColumns(20);
        secondFeatureTextArea.setRows(5);
        secondFeatureScrollPane.setViewportView(secondFeatureTextArea);

        javax.swing.GroupLayout featuresPanelLayout = new javax.swing.GroupLayout(featuresPanel);
        featuresPanel.setLayout(featuresPanelLayout);
        featuresPanelLayout.setHorizontalGroup(
            featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featuresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(firstFeatureLabel)
                    .addComponent(firstFeatureScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(secondFeatureLabel)
                    .addComponent(secondFeatureScrollPane))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        featuresPanelLayout.setVerticalGroup(
            featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featuresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(firstFeatureLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(firstFeatureScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(secondFeatureLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(secondFeatureScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        eventsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Events & Jobs", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        eventLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        eventLabel.setText("Random Event:");

        eventTextArea.setColumns(20);
        eventTextArea.setRows(5);
        eventScrollPane.setViewportView(eventTextArea);

        jobsLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jobsLabel.setText("Jobs:");

        jobsTextArea.setColumns(20);
        jobsTextArea.setRows(5);
        jobsScrollPane.setViewportView(jobsTextArea);

        javax.swing.GroupLayout eventsPanelLayout = new javax.swing.GroupLayout(eventsPanel);
        eventsPanel.setLayout(eventsPanelLayout);
        eventsPanelLayout.setHorizontalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventScrollPane)
                    .addGroup(eventsPanelLayout.createSequentialGroup()
                        .addGroup(eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eventLabel)
                            .addComponent(jobsLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jobsScrollPane))
                .addContainerGap())
        );
        eventsPanelLayout.setVerticalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eventLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jobsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jobsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        generatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Control Panel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        generateButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generateButton.setText("GENERATE!");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        generateButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generateButton1.setLabel("PRINT!");
        generateButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout generatePanelLayout = new javax.swing.GroupLayout(generatePanel);
        generatePanel.setLayout(generatePanelLayout);
        generatePanelLayout.setHorizontalGroup(
            generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(generateButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        generatePanelLayout.setVerticalGroup(
            generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(featuresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(foodEtcPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tavernNamePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barkeepPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(generatePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(barkeepPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tavernNamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(eventsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(featuresPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(foodEtcPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(generatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sideBusinessFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sideBusinessFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sideBusinessFieldActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        // TODO add your handling code here:
        tavernCobbler();
    }//GEN-LAST:event_generateButtonActionPerformed

    private void generateButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateButton1ActionPerformed

    public void tavernCobbler() {
        
        nameCobbler();
        lightingCobbler();
        smellsCobbler();
        barkeepCobbler();
        patronCobbler();
        interestingFeaturesCobbler();
        eventAndJobCobbler();
        specialsCobbler();
        strangeCuisineCobbler();
        strangeBrewCobbler();
        sideBusinessCobbler();
        entertainmentCobbler();
    }
    
    public void entertainmentCobbler() {
    
        ArrayList<String> entertainmentList = new ArrayList<>();
        Random rand = new Random();
        
        entertainmentList.add("Gaggle of mimes.. miming!");
        entertainmentList.add("Bard singing of legends of yore");
        entertainmentList.add("Inept poet reciting rubbish");
        entertainmentList.add("Ensemble of harps, horns and drums");
        entertainmentList.add("Two people punching each other");
        entertainmentList.add("Arm wrestling contest");
        entertainmentList.add("Pie eating contest");
        entertainmentList.add("Razor Cage Fight!");
        entertainmentList.add("Gambling: 1) cards; 2) dice");
        entertainmentList.add("Troupe of minstrels");
        entertainmentList.add("Pickled egg eating contest");
        entertainmentList.add("Hedge mage conjuring cheap tricks");
        entertainmentList.add("Lone flutist");
        entertainmentList.add("Lone lutist");
        entertainmentList.add("Dance hall with conjured music");
        entertainmentList.add("Darts game");
        entertainmentList.add("Bowling with glowing crystal skulls");
        entertainmentList.add("Drinking contest: mundane");
        entertainmentList.add("Drinking contest: strange brew");
        entertainmentList.add("Insect racing contest");
        //entertainmentList.add("");
        
        String entertainment = entertainmentList.get(rand.nextInt(
                entertainmentList.size()));
        
        entertainmentField.setText(entertainment);
    }
    
    public void sideBusinessCobbler() {
        
        ArrayList<String> businessList = new ArrayList<>();
        Random rand = new Random();
        
        businessList.add("Fencing stolen goods");
        businessList.add("Selling slaves");
        businessList.add("Obtaining slaves");
        businessList.add("Chapter of a thieves guild");
        businessList.add("Brokering mercenary services");
        businessList.add("Brothel");
        businessList.add("Manufacture of illicit substances");
        businessList.add("House of holistic healing");
        businessList.add("Brewery");
        businessList.add("Smithy");
        businessList.add("Kidnapping and ransoming");
        businessList.add("Discreet courier services");
        businessList.add("Escort services");
        businessList.add("Chapter of an assassins guild");
        businessList.add("Chapter of a knightly order");
        businessList.add("Chapter of a religious order");
        businessList.add("Antique shop");
        businessList.add("Apotechary");
        businessList.add("Collector of rare documents");
        businessList.add("Promotion of Razor Cage Fights");
        businessList.add("Smuggling");
        businessList.add("Sale of horses and mules");
        businessList.add("Jeweller");
        businessList.add("Carriage services");
        businessList.add("Spying for a foreign power");
        businessList.add("Spying for a local power");
        businessList.add("Fetish club");
        businessList.add("Delivering sacrifices to a cult");
        businessList.add("Messenger services");
        businessList.add("Trafficking forbidden items");
        businessList.add("Barbershop");
        businessList.add("Tailoring services");
        businessList.add("Carpentry");
        //businessList.add("");
        
        String business = businessList.get(rand.nextInt(businessList.size()));
        
        sideBusinessField.setText(business);
    }
    
    public void strangeBrewCobbler() {
        
        ArrayList<String> drinkList = new ArrayList<>();
        Random rand = new Random();
        
        drinkList.add("Elven cider");
        drinkList.add("Elven chilled wine");
        drinkList.add("Elven wine");
        drinkList.add("Dwarf spirits");
        drinkList.add("Dwarf beer");
        drinkList.add("Fizzy wine");
        drinkList.add("Gnomish gin");
        drinkList.add("Halfling ale (from a distant land)");
        drinkList.add("Dragonborn whiskey");
        drinkList.add("Goblin sake");
        drinkList.add("Ogre IPA");
        drinkList.add("Strange cider (thick and dark)");
        drinkList.add("Storm giant rum");
        drinkList.add("Ooze slurry");
        drinkList.add("Orcish moonshine");
        
        String drink = drinkList.get(rand.nextInt(drinkList.size()));
        
        brewField.setText(drink);
    }
    
    public void strangeCuisineCobbler() {
        
        ArrayList<String> strangeCuisineList = new ArrayList<>();
        
        Random rand = new Random();
        
        strangeCuisineList.add("Snake Egg Omelette");
        strangeCuisineList.add("Serpent Souflé");
        strangeCuisineList.add("Maggots on Toast");
        strangeCuisineList.add("Jellyfish Sauce");
        strangeCuisineList.add("Pixie Wing Tart");
        strangeCuisineList.add("Boar Hoof Paya");
        strangeCuisineList.add("Marrow Meal");
        strangeCuisineList.add("Gryphon Flank");
        strangeCuisineList.add("Sweet Carrot Delight");
        strangeCuisineList.add("Gnome Berry Surprise");
        strangeCuisineList.add("Bear's Face Curry");
        strangeCuisineList.add("Squirrel Stew");
        strangeCuisineList.add("Mystery Mutton");
        strangeCuisineList.add("Cockatrice Breast");
        strangeCuisineList.add("Wolf's Testicle Jelly");
        strangeCuisineList.add("Glowing Mushroom Salad");
        strangeCuisineList.add("Hardboiled Wyvern Eggs");
        strangeCuisineList.add("Wandering Moss Salad");
        strangeCuisineList.add("Fried Chimera Paws");
        strangeCuisineList.add("Dwarf Bread");
        strangeCuisineList.add("Mimic Steak");
        strangeCuisineList.add("Fried Giant Spider Legs");
        strangeCuisineList.add("Candied Elemental Eyes");
        strangeCuisineList.add("Vradian Blue");
        //strangeCuisineList.add("");
        
        String cuisine = strangeCuisineList.get(rand.nextInt(
                strangeCuisineList.size()));
        
        cuisineField.setText(cuisine);
        
    }
    
    public void specialsCobbler() {
        
        ArrayList<String> specialsList = new ArrayList<>();
        Random rand = new Random();
        
        specialsList.add("Rice and catch of the day");
        specialsList.add("Fried potatoes and sausage");
        specialsList.add("Cabbage casarole");
        specialsList.add("Mashed potatoes and elk steak");
        specialsList.add("Bear flank and salad");
        specialsList.add("Rice and chicken");
        specialsList.add("Almond bread and butter");
        specialsList.add("Pork curry and rice");
        specialsList.add("Chicken wrap");
        specialsList.add("Rice and duck drumsticks");
        specialsList.add("Beef curry and rice");
        specialsList.add("Chicken curry");
        specialsList.add("Ground beef and baked potatoes");
        specialsList.add("Chicken salad");
        specialsList.add("Eggs and bacon");
        specialsList.add("Ham sandwich");
        specialsList.add("Pork pie");
        specialsList.add("Beef pie");
        specialsList.add("Fowl pie");
        specialsList.add("Kidney pie");
        specialsList.add("Fish tartar and fried potatoes");
        specialsList.add("Fish and chips");
        specialsList.add("Onion soup");
        specialsList.add("Spinach soup");
        specialsList.add("Fish stew");
        specialsList.add("Smoked fish and rice");
        specialsList.add("Apple pie");
        specialsList.add("Cinnamon bun");
        specialsList.add("Sweet potato pie");
        specialsList.add("Berry pie");
        specialsList.add("Vegetable stew");
        specialsList.add("Bear mutton and potatoes");
        specialsList.add("Steak and fried potatoes");
        //specialsList.add("");
        
        String specials = specialsList.get(rand.nextInt(specialsList.size()));
        
        specialsField.setText(specials);
    }
    
    public void eventAndJobCobbler() {
        
        ArrayList<String> eventList = new ArrayList<>();
        ArrayList<String> jobList = new ArrayList<>();
        
        Random rand = new Random();
        
        eventList.add("Troupe of wandering actors is preparing a show \n"
                + "nearby, and folk from far and wide are heading to see it. \n"
                + "Strange symbols, yellow robes and curious dialects \n"
                + "seem to feature heavily in their play.");
        
        eventList.add("Obscure religious holiday. Involves 1) ritual scarification; \n"
                + "2) sacrifices of food and drink; 3) smoking sacred herbs; \n"
                + "4) partaking in the drinking of the \"blood\" of the deity; \n"
                + "5) praying and chanting; 6) some darker sacrifice.");
        
        eventList.add("Duel to the death.");
        
        eventList.add("Band of sullen soldiers heading into a conflict.");
        
        eventList.add("Holy man / woman barges in and proclaims that the \n"
                + "patrons must help him / her tear down a nearby building \n"
                + "or a dire fate will befall the local communities.");
        
        eventList.add("Heir of a local noble is harassing the commoners \n"
                + "and tensions are rising. Will this end in bloodshed?");
        
        eventList.add("Strange beasts hunt folk in the night and leave \n"
                + "behind only tattered clothes and pools of blood.");
        
        eventList.add("Local conflict is escalating and people are \n"
                + "being press-ganged into service by ruffians.");
        
        eventList.add("Storm rises suddenly and makes travel dangerous \n"
                + "for days.");
        
        eventList.add("The prisoners of a local \"black site\" have killed \n"
                + "all the wardens and escaped. The countryside is \n"
                + "overrun with deranged, dangerous criminals. And \n"
                + "now some new strangers arrive at the establishment..");
        
        eventList.add("During the night a thicket of briars surrounds the \n"
                + "building. The briar thorns glisten wetly with blood.");
        
        eventList.add("Grandiose wedding feast is taking place outside the \n"
                + "tavern / inn. Unfortunately, some nefarious agent laced \n"
                + "the bride's father's drink with poison and now he's \n"
                + "dead. Who could've done this?");
        
        eventList.add("Good old fashioned hootenanny!");
        
        eventList.add("Masked group of people has reserved parts of the \n"
                + "inn for their private use. Behind the closed doors, they \n"
                + "are 1) having an orgy (cream of the society only!); \n"
                + "2) a band of assassins planning an operation; 3) \n"
                + "a circle of cultists summoning a fiend.");
        
        eventList.add("Satyrs are having their revels in a nearby grove and \n"
                + "the local adolescents have snuck off to participate in the \n"
                + "celebration. Experience tells that some of them will not \n"
                + "return back home and some of the lasses will be pregnant \n"
                + "after the revels.");
        
        eventList.add("A solemn procession of spirits pass by the tavern and \n"
                + "no one knows where they are coming from or going to.");
        
        eventList.add("A public execution is taking place tomorrow and the \n"
                + "locals are in a festive mood. Rumors tell that the \n"
                + "condemned claims innocence. Are they innocent?");
        
        eventList.add("Celebration of a local 1) hero; 2) significant event.");
        
        eventList.add("A minor earthquake shakes the inn and natives are \n"
                + "getting restless. The seismic activity has become more \n"
                + "frequent in recent times.");
        
        eventList.add("Rumors of a brewing conflict circulate among the \n"
                + "clientele. The mood is in the pits.");
        
        eventList.add("A flower that blooms once every 1) decade; 2) 15 years; \n"
                + "3) century is about to bloom.");
        //eventList.add("");
        
        jobList.add("The flayed skin of a local woodsman was found hanging \n"
                + "from a briar plant entwined around the mightiest tree \n"
                + "in the forest. The skin was expertly removed.");
        
        jobList.add("Travelling teacher visited the community and taught \n"
                + "reading, writing and addition to the children. After he \n"
                + "departed, one of the kids fell unconcious and hasn't \n"
                + "awoken. The child is slowly wasting away.");
        
        jobList.add("Sect of religious extremists have been holed up in \n"
                + "an abandoned fort for weeks. The locals are getting antsy.");
        
        jobList.add("On moonless nights a haunting tune can be heard in the \n"
                + "wilderness. Anyone hearing the tune risks being mesmerized \n"
                + "by it. Those enchanted by the music try to follow it – never \n"
                + "to return.");
        
        jobList.add("Vampire (or some other creature of the night) has made \n"
                + "a lair near the community. It is slowly corrupting the \n"
                + "local leadership and taking their children as its beloved \n"
                + "\"pets\".");
        
        jobList.add("Nearby forest has begun spreading with an amazing speed \n"
                + "and corrupted, twisted beasts rampage around the \n"
                + "countryside. What has happened to the local Druidic circle?");
        
        jobList.add("Envious orchardist wants to know how his competitor is \n"
                + "growing tart, ripe apples around the year. Also, the \n"
                + "competing orchard's cider is suspiciously popular.");
        
        jobList.add("During the last earthquake, a passage opened into the \n"
                + "depths of the earth. The local populace fears that  \n"
                + "something evil will crawl up from the darkness. Or has \n"
                + "it already?");
        
        jobList.add("Someone is leaving parcels filled with a volatile \n"
                + "alchemical substance lying around. Thus far, the exploding \n"
                + "\"presents\" have led to severe burns, loss of fingers and \n"
                + "eye damage. The parcels are getting bigger, and it is only \n"
                + "the matter of time when someone loses their life..");
        
        jobList.add("Frogs in a nearby pond have begun their courtship songs \n"
                + "(maybe very out of season). Thing is, they're not croaking: \n"
                + "they're singing in the voices of disappeared children.");
        
        jobList.add("Somebody has been digging up graves from un-sanctified \n"
                + "areas and stolen the corpses. Who is the perpetrator and \n"
                + "what are they up to?");
        
        jobList.add("Strange lights have been sighted glowing in the night from \n"
                + "the cliffside, where the abandoned Dwarf complex lies. Some \n"
                + "agency has claimed the area as it base of operations.");
        
        jobList.add("Nearby 1) temple; 2) manor; 3) arcane laboratory was \n"
                + "broken into and something valuable was stolen. The owner \n"
                + "wants his property back – desperately. The stolen object \n"
                + "was: 1) a heretical manuscript; 2) a deed to a barren lot of \n"
                + "land; 3) a magical item.");
        
        jobList.add("A local genius 1) poet; 2) playwright; 3) painter has \n"
                + "lost their \"muse\" and wants him/her/it back. The muse is \n"
                + "1) an object; 2) a person; 3) a spirit; 4) a fey creature.");
        
        jobList.add("A high-end 1) male; 2) female; 3) other courtesan fears \n"
                + "that their lover/client is the target of a nefarious plot \n"
                + "and needs help in thwarting it.");
        
        jobList.add("What is going around paralyzing folk in their sleep and \n"
                + "cutting of their left hands and feet? Are these the deeds \n"
                + "of some demented serial killer or a strange new beast? \n"
                + "What do the owls know?");
        
        jobList.add("Local law enforcement is looking for help in 1) catching \n"
                + "a wanted criminal; 2) solving a puzzle murder; 3) hunting \n"
                + "a dangerous beast");
        //jobList.add("");
        String event = eventList.get(rand.nextInt(eventList.size()));
        String job = jobList.get(rand.nextInt(jobList.size()));
        
        eventTextArea.setText(event);
        jobsTextArea.setText(job);
    }
    
    public void interestingFeaturesCobbler() {
        
        ArrayList<String> features = new ArrayList<>();
        Random rand = new Random();
        
        features.add("A ragged hole in the ceiling extends through the \n"
                + "building showing blue sky. Gentle music floats down \n"
                + "the hole and occasionally a large shadow obscures it. \n"
                + "The building appears to be intact from the outside.");
        
        features.add("The common room is lined with shelves holding thick \n"
                + "tomes written in a long-dead language. Sometimes a \n"
                + "tome floats accross the room trailing dust behind it.");
        
        features.add("In the center of the room two brass golems dance \n"
                + "a slow waltz. It is said that they will keep dancing \n"
                + "until the end of the wolrd.");
        
        features.add("A decrepit stone altar with faded markings stands at the \n"
                + "end of the bar. Whoever prays there drinks for free the \n"
                + "rest of the day.");
        
        features.add("Animated mouths carved into the walls whisper barely \n"
                + "barely heard soothing words.");
        
        features.add("The fireplace is built into a large marble statue \n"
                + "depicting a hero of old. The head of the statue has \n"
                + "been cut off long ago.");
        
        features.add("One side of the common room has been converted into \n"
                + "a pool for the patrons to lounge in. The water is 1) \n"
                + "clear; 2) murky; 3) noxious.");
        
        features.add("Spectral patrons wearing strange clothes flit among \n"
                + "the living folk. They avoid contact with the mundane \n"
                + "patrons and turn away if someone tries to engage them \n"
                + "in a conversation.");
        
        features.add("The gravity's pull is either 1) stronger; 2) weaker \n"
                + "in the establishment.");
        
        features.add("A long, narrow table wreathed in wilted flowers. On \n"
                + "the table lies the embalmed corpse of the founder of \n"
                + "the establishment.");
        
        features.add("The furniture is crafted from the spine of some \n"
                + "gigantic creature. The chairs are not particularly \n"
                + "comfortable to sit in and the surfaces of the tables \n"
                + "are quite uneven.");
        
        features.add("A pillar of jagged crystal pushes through the floor. \n"
                + "Something dark shimmers in the angles of the cuts and \n"
                + "anyone scrutinizing the pillar sees into the worst \n"
                + "possible future they can imagine.");
        
        features.add("Thick, sticky webs hang down from the rafters. On rare \n"
                + "mornings some patrons are found dead in their rooms, \n"
                + "wrapped in cocoons with their insides liquified.");
        
        features.add("In addition to other lighting, fluorescent mushrooms \n"
                + "grow from the floor and walls. They glow with a gentle \n"
                + "bluish light, which intensifies as something living \n"
                + "approaches them.");
        
        features.add("Beginning at midnight, the walls bleed and sounds \n"
                + "of stiffled pleasure echo through the premises for an \n"
                + "hour.");
        
        features.add("The serving staff is composed of halfling-sized, \n"
                + "six-limbed monkeys wearing garish pantaloons. They \n"
                + "serve the customers with speed and dexterity.");
        
        features.add("A fountain of ale churns besides the bar and all are \n"
                + "welcome to drink one stein for free. The ale is quite \n"
                + "potent.");
        
        features.add("The inn / tavern is carried around on the back of a \n"
                + "gargantuan, crab-like automaton. The automaton stays \n"
                + "immobile for most of the time, but occasionally it starts \n"
                + "crawling. The locals curse it as it crashes into their \n"
                + "property.");
        
        features.add("The tables are enchanted to keep one's food warm and \n"
                + "drink cold. Sometimes the enchantment malfunctions. A \n"
                + "golden haze swirls above the tabletops.");
        
        features.add("The building and furniture of the establishment seem \n"
                + "to be crafted from a single block of stone. Everything is \n"
                + "scaled a little too large for the average human.");
        
        features.add("The serving staff is made of floating, animated \n"
                + "tableware. Occasionally they sing songs of vampires, \n"
                + "curses and dark enchantments.");
        
        features.add("The furniture is decorated with exquisite carvings \n"
                + "of nude folk of every conceivable species and sexes \n"
                + "going at each other in an orgy of pleasure and violence.");
        
        features.add("The walls are covered in psychotic patterns of jarring, \n"
                + "glaring colors. Once per day the patterns begin to glow \n"
                + "and flicker frenziedly. Seeing this might induce seizures \n"
                + "or hallucinations (or both!).");
        
        features.add("Tunnel descends from the common room terminating in \n"
                + "a large underground dance floor. Enchanted musical \n"
                + "instruments play an aggressive tune, driving the \n"
                + "dancers into an extatic frenzy.");
        
        features.add("Curiously, the ceiling of the establishment is \n"
                + "actually the floor. Even more curiously, the gravity \n"
                + "seems to be reversed here.");
        
        features.add("A magical portal to another tavern in another land \n"
                + "shimmers here.");
        
        features.add("Entering the common room transports the patron to a \n"
                + "1) mountain top; 2) secluded forest glade; 3) \n"
                + "nightmarish hellscape; 4) platform floating in the \n"
                + "Void. All the usual tavern furnishings and services can \n"
                + "be found here.");
        
        features.add("Time runs strangely within: midnight runs into noon, \n"
                + "which runs into dusk leading towards the rosy dawn.");
        
        //features.add("");
        
        String firstFeature = features.get(rand.nextInt(features.size()));
        String secondFeature = features.get(rand.nextInt(features.size()));
        
        if (firstFeature.equals(secondFeature)) {
            firstFeatureTextArea.setText(firstFeature);
        } else {
            firstFeatureTextArea.setText(firstFeature);
            secondFeatureTextArea.setText(secondFeature);
        }
    }
    
    public void patronCobbler() {
        
        ArrayList<String> patronTextList = new ArrayList<>();
        ArrayList<String> interestingPatronList = new ArrayList<>();
        Random rand = new Random();
        
        patronTextList.add("1");
        patronTextList.add("2-10");
        patronTextList.add("2-10");
        patronTextList.add("2-10");
        patronTextList.add("11-20");
        patronTextList.add("11-20");
        patronTextList.add("11-20");
        patronTextList.add("21-30");
        patronTextList.add("21-30");
        patronTextList.add("31-40");
        patronTextList.add("31-40");
        patronTextList.add("41+");
        
        numberOfPatronsField.setText(patronTextList.get(rand.
                nextInt(patronTextList.size())));

        interestingPatronList.add("Bandit(?) on the run");
        interestingPatronList.add("Exiled prince / princess");
        interestingPatronList.add("Undead minstrel");
        interestingPatronList.add("Creature from another plane");
        interestingPatronList.add("War hero");
        interestingPatronList.add("Famous bard");
        interestingPatronList.add("Wandering guru");
        interestingPatronList.add("Infamous mime");
        interestingPatronList.add("Doppelganger of a local noble");
        interestingPatronList.add("Thrill-seeking student(s)");
        interestingPatronList.add("Slumming noble lad / lass");
        interestingPatronList.add("Visitor from savage lands");
        interestingPatronList.add("Poet of some renown");
        interestingPatronList.add("Actor who has fallen from favor");
        interestingPatronList.add("Disgraced noble");
        interestingPatronList.add("Deserter from a local fighting force");
        interestingPatronList.add("Deserter from a distant land");
        interestingPatronList.add("Merchant flashing money");
        interestingPatronList.add("Spirit of a former patron");
        interestingPatronList.add("Killer prowling for their next victim");
        interestingPatronList.add("Priest / priestess of a local order");
        interestingPatronList.add("Secret cultist");
        interestingPatronList.add("Local crime bosses number one goon");
        interestingPatronList.add("Local crime boss");
        interestingPatronList.add("Sorcerer resting after a day's travel");
        interestingPatronList.add("Knight on a quest");
        interestingPatronList.add("Self-important tax collector");
        interestingPatronList.add("Well-known slaver");
        interestingPatronList.add("Disliked member of the upper class");
        interestingPatronList.add("A prophet preaching doom");
        interestingPatronList.add("An oracle foretelling the future");
        interestingPatronList.add("Well-loved local entrepreneur");
        interestingPatronList.add("Sentient fungus-person having a brew");
        interestingPatronList.add("Travelling gambler");
        interestingPatronList.add("A nihilistic philosopher");
        
        interestingPatronField.setText(interestingPatronList.get(rand.
                nextInt(interestingPatronList.size())));
        
    }
    
    public void barkeepCobbler() {
        
        ArrayList<String> barkeepAttribute = new ArrayList<>();
        
        Random rand = new Random();
        
        barkeepAttribute.add("cranky");
        barkeepAttribute.add("pretty");
        barkeepAttribute.add("pouty");
        barkeepAttribute.add("glum");
        barkeepAttribute.add("pockmarked");
        barkeepAttribute.add("sarcastic");
        barkeepAttribute.add("sardonic");
        barkeepAttribute.add("dull-witted");
        barkeepAttribute.add("strong");
        barkeepAttribute.add("weak");
        barkeepAttribute.add("pale");
        barkeepAttribute.add("ruddy");
        barkeepAttribute.add("bald");
        barkeepAttribute.add("singing");
        barkeepAttribute.add("happy");
        barkeepAttribute.add("blind");
        barkeepAttribute.add("mute");
        barkeepAttribute.add("clumsy");
        barkeepAttribute.add("deft");
        barkeepAttribute.add("deaf");
        barkeepAttribute.add("Muscled");
        barkeepAttribute.add("angry");
        barkeepAttribute.add("scowling");
        barkeepAttribute.add("lazy");
        barkeepAttribute.add("humming");
        barkeepAttribute.add("whistling");
        barkeepAttribute.add("thin");
        barkeepAttribute.add("nervous");
        barkeepAttribute.add("tall");
        barkeepAttribute.add("short");
        barkeepAttribute.add("dizzy");
        barkeepAttribute.add("enthusiastic");
        barkeepAttribute.add("portly");
        barkeepAttribute.add("mad");
        barkeepAttribute.add("toothless");
        barkeepAttribute.add("well-dressed");
        barkeepAttribute.add("articulate");
        barkeepAttribute.add("well-mannered");
        barkeepAttribute.add("shuffling");
        barkeepAttribute.add("near-sighted");
        barkeepAttribute.add("one-armed");
        barkeepAttribute.add("peg-legged");
        barkeepAttribute.add("one-eyed");
        barkeepAttribute.add("bruised");
        barkeepAttribute.add("twitchy");
        barkeepAttribute.add("nervous");
        barkeepAttribute.add("sweaty");
        barkeepAttribute.add("enigmatic");
        barkeepAttribute.add("bent");
        barkeepAttribute.add("giggling");
        barkeepAttribute.add("greedy");
        barkeepAttribute.add("nice");
        //barkeepAttribute.add("");

        String firstAttribute = barkeepAttribute.get(rand.nextInt(
                                barkeepAttribute.size()));
        String secondAttribute = barkeepAttribute.get(rand.nextInt(
                                barkeepAttribute.size()));
        String description;
        
        if (firstAttribute.equals(secondAttribute)) {
            description = firstAttribute.substring(0,1).toUpperCase() + 
                    firstAttribute.substring(1).toLowerCase();
            barkeepField.setText(description);
        } else {
            description = firstAttribute.substring(0,1).toUpperCase() + 
                    firstAttribute.substring(1).toLowerCase() + " and " + 
                    secondAttribute;
            barkeepField.setText(description);
        }
    }
    
    public void smellsCobbler() {
        
        ArrayList<String> smellsList = new ArrayList<>();
        
        smellsList.add("blood");
        smellsList.add("sawdust");
        smellsList.add("mold");
        smellsList.add("cider");
        smellsList.add("ale");
        smellsList.add("wine");
        smellsList.add("mulled Wine");
        smellsList.add("cinnamon");
        smellsList.add("vomit");
        smellsList.add("urine");
        smellsList.add("latrines");
        smellsList.add("wet dog");
        smellsList.add("wet socks");
        smellsList.add("straw");
        smellsList.add("rotten fruit");
        smellsList.add("pipe smoke");
        smellsList.add("sweet incense");
        smellsList.add("curry");
        smellsList.add("beer");
        smellsList.add("manure");
        smellsList.add("mud");
        smellsList.add("dust");
        smellsList.add("wet wool");
        smellsList.add("sweat");
        smellsList.add("charred meat");
        smellsList.add("bacon");
        smellsList.add("fried potatoes");
        smellsList.add("resin");
        smellsList.add("boiled cabbage");
        smellsList.add("smoked fish");
        smellsList.add("fried veggies");
        smellsList.add("boiled rice");
        smellsList.add("mutton");
        smellsList.add("mint");
        smellsList.add("soap water");
        
        Random rand = new Random();
        
        String smellOne = smellsList.get(rand.nextInt(smellsList.size()));
        String smellTwo = smellsList.get(rand.nextInt(smellsList.size()));
        String smellCombined;
        
        if (!smellTwo.equals(smellOne)) {
            smellCombined = (smellOne + " and " + smellTwo);
            smellsField.setText(smellCombined.substring(0,1).toUpperCase() + 
                    smellCombined.substring(1).toLowerCase());
        } else {
            smellsField.setText(smellOne.substring(0,1).toUpperCase() + 
                    smellOne.substring(1).toLowerCase());
        }
    }
    
    public void lightingCobbler() {
        
        Random rand = new Random();
        int number = rand.nextInt(7);
        
        switch(number) {
            case 0: lightingField.setText("Candles only");
                    break;
            case 1: lightingField.setText("Several torches");
                    break;
            case 2: lightingField.setText("Chandelier");
                    break;
            case 3: lightingField.setText("Glowing stones set in the walls");
                    break;
            case 4: lightingField.setText("Fireplace and torches");
                    break;
            case 5: lightingField.setText("Fireplace and candles");
                    break;
            case 6: lightingField.setText("Weird alchemical lights");
                    break;
        }
    }
    
    public void nameCobbler() {
        
        ArrayList<String> tavernNameDescriptor = new ArrayList<>();
        ArrayList<String> tavernNameNoun = new ArrayList<>();
        
        Random rand = new Random();
        
        tavernNameDescriptor.add("Blunted");
        tavernNameDescriptor.add("Pointy");
        tavernNameDescriptor.add("Lazy");
        tavernNameDescriptor.add("Dancing");
        tavernNameDescriptor.add("Naked");
        tavernNameDescriptor.add("Stern");
        tavernNameDescriptor.add("Royal");
        tavernNameDescriptor.add("Swarming");
        tavernNameDescriptor.add("Emerald");
        tavernNameDescriptor.add("Tricksy");
        tavernNameDescriptor.add("Lusty");
        tavernNameDescriptor.add("Armored");
        tavernNameDescriptor.add("Flexing");
        tavernNameDescriptor.add("Caustic");
        tavernNameDescriptor.add("Prancing");
        tavernNameDescriptor.add("Toothy");
        tavernNameDescriptor.add("Bashful");
        tavernNameDescriptor.add("Smirking");
        tavernNameDescriptor.add("Vain");
        tavernNameDescriptor.add("Poetic");
        tavernNameDescriptor.add("Glum");
        tavernNameDescriptor.add("Gloomy");
        tavernNameDescriptor.add("Plump");
        tavernNameDescriptor.add("Skeletal");
        tavernNameDescriptor.add("Dying");
        tavernNameDescriptor.add("Lively");
        tavernNameDescriptor.add("Arcane");
        tavernNameDescriptor.add("Mystic");
        tavernNameDescriptor.add("Blistering");
        tavernNameDescriptor.add("Gambling");
        tavernNameDescriptor.add("Yellow");
        tavernNameDescriptor.add("Black");
        tavernNameDescriptor.add("Red");
        tavernNameDescriptor.add("Bronze");
        tavernNameDescriptor.add("Laughing");
        tavernNameDescriptor.add("Sleeping");
        tavernNameDescriptor.add("Meaty");
        tavernNameDescriptor.add("Limber");
        tavernNameDescriptor.add("Wounded");
        tavernNameDescriptor.add("Hanged");
        tavernNameDescriptor.add("Tickling");
        tavernNameDescriptor.add("Woolly");
        tavernNameDescriptor.add("Safe");
        tavernNameDescriptor.add("Cheap");
        tavernNameDescriptor.add("Poisonous");
        tavernNameDescriptor.add("Roaring");
        tavernNameDescriptor.add("Bleeding");
        tavernNameDescriptor.add("Shining");
        tavernNameDescriptor.add("Colorful");
        tavernNameDescriptor.add("Lurking");
        tavernNameDescriptor.add("Hobbling");
        tavernNameDescriptor.add("Drunk");
        tavernNameDescriptor.add("Stout");
        tavernNameDescriptor.add("Thick");
        tavernNameDescriptor.add("Little");
        tavernNameDescriptor.add("Big");
        tavernNameDescriptor.add("Gnashing");
        tavernNameDescriptor.add("Spectral");
        tavernNameDescriptor.add("Extatic");
        tavernNameDescriptor.add("Blissful");
        tavernNameDescriptor.add("Leering");
        tavernNameDescriptor.add("Chained");
        tavernNameDescriptor.add("Wrinkled");
        tavernNameDescriptor.add("Narrow");
        tavernNameDescriptor.add("Rigid");
        tavernNameDescriptor.add("Erect");
        tavernNameDescriptor.add("Erratic");
        tavernNameDescriptor.add("Bloody");
        tavernNameDescriptor.add("Gleaming");
        tavernNameDescriptor.add("Sharp");
        tavernNameDescriptor.add("Homeless");
        tavernNameDescriptor.add("Undead");
        tavernNameDescriptor.add("Flaming");
        tavernNameDescriptor.add("Glistening");
        tavernNameDescriptor.add("Ancient");
        tavernNameDescriptor.add("Odd");
        tavernNameDescriptor.add("Thieving");
        tavernNameDescriptor.add("Basking");
        tavernNameDescriptor.add("Cascading");
        //tavernNameDescriptor.add("");
        
        tavernNameNoun.add("Queen");
        tavernNameNoun.add("Priest");
        tavernNameNoun.add("Vampire");
        tavernNameNoun.add("Mug");
        tavernNameNoun.add("House");
        tavernNameNoun.add("Salmon");
        tavernNameNoun.add("Sun");
        tavernNameNoun.add("Simpleton");
        tavernNameNoun.add("Badger");
        tavernNameNoun.add("Staff");
        tavernNameNoun.add("Horse");
        tavernNameNoun.add("Skeleton");
        tavernNameNoun.add("Titan");
        tavernNameNoun.add("Giant");
        tavernNameNoun.add("Shark");
        tavernNameNoun.add("Courtesan");
        tavernNameNoun.add("Harlot");
        tavernNameNoun.add("Jester");
        tavernNameNoun.add("Corpse");
        tavernNameNoun.add("Knight");
        tavernNameNoun.add("Elf");
        tavernNameNoun.add("Hound");
        tavernNameNoun.add("Cat");
        tavernNameNoun.add("King");
        tavernNameNoun.add("Baron");
        tavernNameNoun.add("Knave");
        tavernNameNoun.add("Bandit");
        tavernNameNoun.add("Ruffian");
        tavernNameNoun.add("Moose");
        tavernNameNoun.add("Laurel");
        tavernNameNoun.add("Acorn");
        tavernNameNoun.add("Boat");
        tavernNameNoun.add("Wagon");
        tavernNameNoun.add("Rock");
        tavernNameNoun.add("Crow");
        tavernNameNoun.add("Dragon");
        tavernNameNoun.add("Fang");
        tavernNameNoun.add("Claw");
        tavernNameNoun.add("Cauldron");
        tavernNameNoun.add("Soup");
        tavernNameNoun.add("Pie");
        tavernNameNoun.add("Boneyard");
        tavernNameNoun.add("Shepherd");
        tavernNameNoun.add("Officer");
        tavernNameNoun.add("Sheep");
        tavernNameNoun.add("Eagle");
        tavernNameNoun.add("Golem");
        tavernNameNoun.add("Orc");
        tavernNameNoun.add("Wanderer");
        tavernNameNoun.add("Barrel");
        tavernNameNoun.add("Minstrel");
        tavernNameNoun.add("Sword");
        tavernNameNoun.add("Arrow");
        tavernNameNoun.add("Bow");
        tavernNameNoun.add("Spear");
        tavernNameNoun.add("Shield");
        tavernNameNoun.add("Crown");
        tavernNameNoun.add("Ring");
        tavernNameNoun.add("Cloak");
        tavernNameNoun.add("Warlock");
        tavernNameNoun.add("Hag");
        tavernNameNoun.add("Fiend");
        tavernNameNoun.add("Ritualist");
        tavernNameNoun.add("Witch");
        tavernNameNoun.add("Moon");
        tavernNameNoun.add("Star");
        tavernNameNoun.add("Banner");
        tavernNameNoun.add("Feather");
        tavernNameNoun.add("Scale");
        tavernNameNoun.add("Zombie");
        tavernNameNoun.add("Serpent");
        tavernNameNoun.add("Leaf");
        tavernNameNoun.add("Hound");
        tavernNameNoun.add("Platter");
        tavernNameNoun.add("Eunuch");
        tavernNameNoun.add("Harp");
        tavernNameNoun.add("Pixie");
        tavernNameNoun.add("Satyr");
        tavernNameNoun.add("Centaur");
        tavernNameNoun.add("Goblin");
        tavernNameNoun.add("Creature");
        tavernNameNoun.add("Dwarf");
        tavernNameNoun.add("Mime");
        tavernNameNoun.add("Trout");
        tavernNameNoun.add("General");
        tavernNameNoun.add("Maiden");
        tavernNameNoun.add("Lad");
        //tavernNameNoun.add("");
        
        int alternative = rand.nextInt(2);
        String firstPart;
        String secondPart;
        String wholeName;
        
        switch (alternative) {
            case 0: firstPart = tavernNameDescriptor.get(rand.nextInt
                                (tavernNameDescriptor.size()));
                    secondPart = tavernNameNoun.get(rand.nextInt
                                (tavernNameNoun.size()));
                    wholeName = "The " + firstPart + " " + secondPart;
                    tavernNameField.setText(wholeName);
                    break;
            case 1: firstPart = tavernNameNoun.get(rand.nextInt
                                (tavernNameNoun.size()));
                    secondPart = tavernNameNoun.get(rand.nextInt
                                (tavernNameNoun.size()));
                    if (firstPart.equals(secondPart)) {
                        wholeName = "The " + firstPart;
                        tavernNameField.setText(wholeName);
                    } else {
                        wholeName = "The " + firstPart + " and the " +
                                    secondPart;
                        tavernNameField.setText(wholeName);
                    }
                    break;
            /**
            case 2: tavernNameField.setText("The " + tavernNameNoun.
                    get(rand.nextInt(tavernNameNoun.size())) + "'s " + 
                    tavernNameNoun.get(rand.nextInt(tavernNameNoun.size())));
                    break;
            **/
        }
        
    }
    
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TavernGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TavernGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TavernGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TavernGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TavernGeneratorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField barkeepField;
    private javax.swing.JLabel barkeepLabel;
    private javax.swing.JPanel barkeepPanel;
    private javax.swing.JTextField brewField;
    private javax.swing.JLabel brewLabel;
    private javax.swing.JTextField cuisineField;
    private javax.swing.JLabel cuisineLabel;
    private javax.swing.JTextField entertainmentField;
    private javax.swing.JLabel entertainmentLabel;
    private javax.swing.JLabel eventLabel;
    private javax.swing.JScrollPane eventScrollPane;
    private javax.swing.JTextArea eventTextArea;
    private javax.swing.JPanel eventsPanel;
    private javax.swing.JPanel featuresPanel;
    private javax.swing.JLabel firstFeatureLabel;
    private javax.swing.JScrollPane firstFeatureScrollPane;
    private javax.swing.JTextArea firstFeatureTextArea;
    private javax.swing.JPanel foodEtcPanel;
    private javax.swing.JButton generateButton;
    private javax.swing.JButton generateButton1;
    private javax.swing.JPanel generatePanel;
    private javax.swing.JTextField interestingPatronField;
    private javax.swing.JLabel interestingPatronLabel;
    private javax.swing.JLabel jobsLabel;
    private javax.swing.JScrollPane jobsScrollPane;
    private javax.swing.JTextArea jobsTextArea;
    private javax.swing.JTextField lightingField;
    private javax.swing.JLabel lightingLabel;
    private javax.swing.JTextField numberOfPatronsField;
    private javax.swing.JLabel numberOfPatronsLabel;
    private javax.swing.JLabel secondFeatureLabel;
    private javax.swing.JScrollPane secondFeatureScrollPane;
    private javax.swing.JTextArea secondFeatureTextArea;
    private javax.swing.JTextField sideBusinessField;
    private javax.swing.JLabel sideBusinessLabel;
    private javax.swing.JTextField smellsField;
    private javax.swing.JLabel smellsLabel;
    private javax.swing.JTextField specialsField;
    private javax.swing.JLabel specialsLabel;
    private javax.swing.JTextField tavernNameField;
    private javax.swing.JLabel tavernNameLabel;
    private javax.swing.JPanel tavernNamePanel;
    // End of variables declaration//GEN-END:variables
}
